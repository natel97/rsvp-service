// Code generated by MockGen. DO NOT EDIT.
// Source: rsvp.go
//
// Generated by this command:
//
//	mockgen -source=rsvp.go -destination=repository_mock.go -package=rsvp
//

// Package rsvp is a generated GoMock package.
package rsvp

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(e RSVP) (*RSVP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(*RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id string) (*RSVP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockRepository) Get(id string) (*RSVP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), id)
}

// GetEventRSVPs mocks base method.
func (m *MockRepository) GetEventRSVPs(eventID string) ([]RSVP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventRSVPs", eventID)
	ret0, _ := ret[0].([]RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventRSVPs indicates an expected call of GetEventRSVPs.
func (mr *MockRepositoryMockRecorder) GetEventRSVPs(eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventRSVPs", reflect.TypeOf((*MockRepository)(nil).GetEventRSVPs), eventID)
}

// GetLatestRSVPByInvitation mocks base method.
func (m *MockRepository) GetLatestRSVPByInvitation(invitationID string) (*RSVP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRSVPByInvitation", invitationID)
	ret0, _ := ret[0].(*RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRSVPByInvitation indicates an expected call of GetLatestRSVPByInvitation.
func (mr *MockRepositoryMockRecorder) GetLatestRSVPByInvitation(invitationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRSVPByInvitation", reflect.TypeOf((*MockRepository)(nil).GetLatestRSVPByInvitation), invitationID)
}

// Update mocks base method.
func (m *MockRepository) Update(id string, details RSVP) (*RSVP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, details)
	ret0, _ := ret[0].(*RSVP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(id, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), id, details)
}
