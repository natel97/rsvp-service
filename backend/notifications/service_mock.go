// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=notifications
//

// Package notifications is a generated GoMock package.
package notifications

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetIsSubscribed mocks base method.
func (m *MockService) GetIsSubscribed(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsSubscribed", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsSubscribed indicates an expected call of GetIsSubscribed.
func (mr *MockServiceMockRecorder) GetIsSubscribed(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsSubscribed", reflect.TypeOf((*MockService)(nil).GetIsSubscribed), id)
}

// Notify mocks base method.
func (m *MockService) Notify(subscription, kind, body, url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", subscription, kind, body, url)
}

// Notify indicates an expected call of Notify.
func (mr *MockServiceMockRecorder) Notify(subscription, kind, body, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockService)(nil).Notify), subscription, kind, body, url)
}

// NotifyEvent mocks base method.
func (m *MockService) NotifyEvent(eventID, kind, body, url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyEvent", eventID, kind, body, url)
}

// NotifyEvent indicates an expected call of NotifyEvent.
func (mr *MockServiceMockRecorder) NotifyEvent(eventID, kind, body, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyEvent", reflect.TypeOf((*MockService)(nil).NotifyEvent), eventID, kind, body, url)
}

// NotifyGroup mocks base method.
func (m *MockService) NotifyGroup(subscriptionKind, kind, body, url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyGroup", subscriptionKind, kind, body, url)
}

// NotifyGroup indicates an expected call of NotifyGroup.
func (mr *MockServiceMockRecorder) NotifyGroup(subscriptionKind, kind, body, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyGroup", reflect.TypeOf((*MockService)(nil).NotifyGroup), subscriptionKind, kind, body, url)
}

// NotifyInvite mocks base method.
func (m *MockService) NotifyInvite(kind, body, invitationID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyInvite", kind, body, invitationID)
}

// NotifyInvite indicates an expected call of NotifyInvite.
func (mr *MockServiceMockRecorder) NotifyInvite(kind, body, invitationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyInvite", reflect.TypeOf((*MockService)(nil).NotifyInvite), kind, body, invitationID)
}

// RegisterForInvitation mocks base method.
func (m *MockService) RegisterForInvitation(invitationID, subscription, kind string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterForInvitation", invitationID, subscription, kind)
}

// RegisterForInvitation indicates an expected call of RegisterForInvitation.
func (mr *MockServiceMockRecorder) RegisterForInvitation(invitationID, subscription, kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForInvitation", reflect.TypeOf((*MockService)(nil).RegisterForInvitation), invitationID, subscription, kind)
}

// RemoveByInvitation mocks base method.
func (m *MockService) RemoveByInvitation(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByInvitation", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByInvitation indicates an expected call of RemoveByInvitation.
func (mr *MockServiceMockRecorder) RemoveByInvitation(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByInvitation", reflect.TypeOf((*MockService)(nil).RemoveByInvitation), id)
}
