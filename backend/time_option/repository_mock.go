// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=timeoption
//

// Package timeoption is a generated GoMock package.
package timeoption

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTimeOption mocks base method.
func (m *MockRepository) CreateTimeOption(to *TimeOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeOption", to)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTimeOption indicates an expected call of CreateTimeOption.
func (mr *MockRepositoryMockRecorder) CreateTimeOption(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeOption", reflect.TypeOf((*MockRepository)(nil).CreateTimeOption), to)
}

// DeleteTimeOption mocks base method.
func (m *MockRepository) DeleteTimeOption(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeOption", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimeOption indicates an expected call of DeleteTimeOption.
func (mr *MockRepositoryMockRecorder) DeleteTimeOption(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeOption", reflect.TypeOf((*MockRepository)(nil).DeleteTimeOption), id)
}

// GetTimeOption mocks base method.
func (m *MockRepository) GetTimeOption(id string) (*TimeOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeOption", id)
	ret0, _ := ret[0].(*TimeOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeOption indicates an expected call of GetTimeOption.
func (mr *MockRepositoryMockRecorder) GetTimeOption(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeOption", reflect.TypeOf((*MockRepository)(nil).GetTimeOption), id)
}
